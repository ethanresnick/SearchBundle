<?php
namespace ERD\SearchBundle\Search\Tests;

use ERD\SearchBundle\Search\IndexManager;
use ERD\SearchBundle\Tests\Stubs\AnnotatedEntityStub;

/**
 * Test class for IndexManager.
 * Generated by PHPUnit on 2012-06-23 at 19:12:51.
 */
class IndexManagerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var IndexManager
     */
    protected $manager;

    protected $mockLucene;
    protected $mockProvider;
    protected $mockHandler;
    

    protected function setUp()
    {
        $this->mockLucene   = $this->getMockBuilder('ERD\SearchBundle\Search\LuceneSearch')->disableOriginalConstructor()->getMock();
        $this->mockProvider = $this->getMock('ERD\SearchBundle\Provider\AggregateEntityProvider');
        $this->mockHandler  = $this->getMockBuilder('ERD\SearchBundle\Mapping\Annotation\IndexableHandler')->disableOriginalConstructor()->getMock();
        
        $this->manager = new IndexManager($this->mockLucene, $this->mockProvider, $this->mockHandler);
    }

    /**
     * @covers ERD\SearchBundle\Search\IndexManager::rebuild
     */
    public function testRebuild()
    {
        $this->mockLucene->expects($this->once())->method('emptyIndex');
        $this->mockProvider->expects($this->once())->method('getAllEntities')->will($this->returnValue(array(new AnnotatedEntityStub(), new AnnotatedEntityStub())));
        $this->mockHandler->expects($this->exactly(2))->method('loadFieldData')->will($this->returnValue(array()));
        $this->mockLucene->expects($this->exactly(2))->method('addDocument');

        $this->manager->rebuild();    
    }

    public function updateProvider()
    {
        $oneItem  = array(new AnnotatedEntityStub());
        $empty    = array();
        $twoItems = array(new AnnotatedEntityStub(), new AnnotatedEntityStub());
        
        return array(
            array($empty, $empty, $empty, 0),
            array($oneItem, $oneItem, $oneItem, 1),
            array($twoItems, $twoItems, $twoItems, 2)
        );
    }    
    /**
     * @dataProvider updateProvider
     */
    public function testUpdate($add, $update, $delete, $count)
    {
        $this->mockLucene->expects($this->exactly($count))->method('addDocument');
        $this->mockLucene->expects($this->exactly($count))->method('deleteDocument');
        $this->mockLucene->expects($this->exactly($count))->method('updateDocument');
        $this->mockLucene->expects($this->once())->method('updateIndex');
        
        $this->manager->update($add, $update, $delete);
    }
    
    public function testUpdateSkipsInvalidEntities()
    {
        $twoItemsOneValid = array(new AnnotatedEntityStub(), new \ERD\SearchBundle\Tests\Stubs\AnnotatedEntityMissingIndexableAnnotationStub());
        $this->mockHandler->expects($this->exactly(6))->method('loadFieldData')->will(
                $this->onConsecutiveCalls(
                        new \Zend\Search\Lucene\Document(), 
                        $this->throwException(new \Doctrine\Common\Annotations\AnnotationException()),
                        new \Zend\Search\Lucene\Document(), 
                        $this->throwException(new \Doctrine\Common\Annotations\AnnotationException()),
                        new \Zend\Search\Lucene\Document(), 
                        $this->throwException(new \Doctrine\Common\Annotations\AnnotationException())
        ));

        $this->mockLucene->expects($this->exactly(1))->method('addDocument');
        $this->mockLucene->expects($this->exactly(1))->method('updateDocument');
        $this->mockLucene->expects($this->exactly(1))->method('deleteDocument');
        
        $this->manager->update($twoItemsOneValid, $twoItemsOneValid, $twoItemsOneValid);
    }

}
?>
